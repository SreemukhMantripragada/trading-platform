name: trading-stack
services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    container_name: zookeeper
    restart: unless-stopped
    env_file: [ ".env" ]
    environment:
      - ALLOW_ANONYMOUS_LOGIN=${ZOOKEEPER_ALLOW_ANONYMOUS_LOGIN}
    ports: [ "${ZOOKEEPER_CLIENT_PORT}:2181" ]
    networks: [ core ]
    tmpfs:
      - /bitnami/zookeeper:size=256m,mode=0755,uid=1001,gid=1001

  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    restart: unless-stopped
    depends_on: [ zookeeper ]
    env_file: [ ".env" ]
    environment:
      - KAFKA_CFG_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:${ZOOKEEPER_CLIENT_PORT}

      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_INTERNAL://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://${KAFKA_OUTSIDE_HOST}:${KAFKA_OUTSIDE_PORT},PLAINTEXT_INTERNAL://kafka:${KAFKA_INSIDE_PORT}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT_INTERNAL

      # Single-broker internals
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1

      # Switches
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=${KAFKA_AUTO_CREATE_TOPICS_ENABLE}
      - ALLOW_PLAINTEXT_LISTENER=${ALLOW_PLAINTEXT_LISTENER}

    ports: [ "${KAFKA_OUTSIDE_PORT}:9092" ]

    # Reliable readiness probe
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server kafka:${KAFKA_INSIDE_PORT} >/dev/null 2>&1"]
      interval: 5s
      timeout: 5s
      retries: 60
      start_period: 40s

    # Bitnami runs as uid/gid 1001
    tmpfs:
      - /bitnami/kafka:size=1g,mode=0755,uid=1001,gid=1001

    networks: [ core ]

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    depends_on: [ kafka ]
    env_file: [ ".env" ]
    environment:
      - KAFKA_CLUSTERS_0_NAME=${KUI_CLUSTER_NAME}
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:${KAFKA_INSIDE_PORT}
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:${ZOOKEEPER_CLIENT_PORT}
    ports: [ "${KAFKA_UI_PORT}:8080" ]
    networks: [ core ]

  kafka-exporter:
    image: danielqsj/kafka-exporter:v1.7.0
    container_name: kafka-exporter
    restart: unless-stopped
    command:
      - --kafka.server=kafka:${KAFKA_INSIDE_PORT}
    ports: [ "${KAFKA_EXPORTER_PORT}:9308" ]
    networks: [ core ]
    depends_on: [ kafka ]

  # SIMPLE topics init: wait for Kafka to be healthy, then run script once.
  kafka-topics-init:
    image: bitnami/kafka:3.6
    container_name: kafka-topics-init
    depends_on:
      kafka:
        condition: service_healthy
    env_file: [ ".env" ]
    environment:
      - BROKER=kafka:${KAFKA_INSIDE_PORT}
      - RF=1
      - DRY_RUN=${TOPICS_DRY_RUN}
    command: bash -lc "/create-topics.sh"
    restart: "no"
    volumes:
      - ./scripts/create-topics.sh:/create-topics.sh:ro
    networks: [ core ]

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    env_file: [ ".env" ]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports: [ "${POSTGRES_PORT}:5432" ]
    networks: [ core ]
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./infra/postgres/init:/docker-entrypoint-initdb.d:ro

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports: [ "${PROMETHEUS_PORT}:9090" ]
    networks: [ core ]

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    env_file: [ ".env" ]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    ports: [ "${GRAFANA_PORT}:3000" ]
    networks: [ core ]
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards

networks: { core: {} }

volumes:
  pg_data: {}